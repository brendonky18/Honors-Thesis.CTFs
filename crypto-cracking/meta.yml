name: Can You Keep Up?
author: [Brendon Ky](https://github.com/brendonky18)

description: |
You are going to be assigned a specific set of instructions, please do not refer to any of the other instruction sets.
Do not worry if you get stuck at any point, or are unable to complete the entire challenge, simply try to get as fas as possible based on the instructions and information provided. This is not meant to be an assessment of your knowledge, and you will not be impacted in any way regardless of how much you are able to complete. 

# Instructions
The aim of this challenge is for you to learn about the practical implementation of RSA.

To our modern understanding, RSA is theoretically sound, however, there are several ways which if implemented incorrectly, can result in it being incredibly trivial to break. 
Your goal is to explore those methods in order to gain a better working understanding of how RSA works, and what makes it so powerful. 

## Challenge Description

On this network there are 4 computers in total. 
There is 1 server, and 3 users (numbered 0, 1, and 2) which are communicating to this server using an encrypted protocol. 
Each client is running TCP dump, and sending it to port 22. You can connect to this port with ssh, and send the output to wireshark, the shell script `remote_pcap.sh` has been provided to do this for you automatically. 
It accepts two arguments, the user number that you are connecting to, and your student username which you use to `ssh` into the swarm network with.

So for example, if I wanted to connect to user `0`, and my user name is `bky`, I run `./remote_pcap.sh 0 bky`. 
Of course, you must have wireshark installed on your local computer, which you can get by running `sudo apt-get install wireshark` if you are using Kali Linux.

You should start with user 0, the password for user 0 is `start_here`. Each user is transmitting the password for the subsequent user over the encrypted protocol, i.e. user 0 is sending user 1's password, and user 1 is sending user 2's. User 2 is transmitting the final flag which you will submit. 

## Protocol Description
The clients communicate with a custom protocol that is intended to mirror how encryption is used in networking. 

1. The client requests the server's public RSA key.
2. The server acknowledges by sending it's public key.
3. The client sends a symmetric key, and a message (the flag/password).
   1. The client first picks a number to be the symmetric key.
   2. The number is then encrypted with the server's public key.
   3. The number is also used to encrypt the message, by xoring the message and key together.
       * If the symmetric key is not long enough to encrypt the entire message, then it will be applied as a block cipher.
       * Meaning that if the key is *n* bits long, it will xor the message in blocks of *n* bits at a time, until it has encrypted the entire message.
   4. Finally, the encrypted symmetric key and encrypted message are then both sent to the server.

## Additional Notes
Here are additional notes to assist you in solving the CTF.
- If you were born from January to April, please refer to the notes [here](https://github.com/brendonky18/Honors-Thesis.CTFs/blob/ctfd-integration/crypto-cracking/notes_0.md).
- If you were born from May to August, please refer to the notes [here](https://github.com/brendonky18/Honors-Thesis.CTFs/blob/ctfd-integration/crypto-cracking/notes_0.md).
- If you were born from September to December, please refer to the notes [here](https://github.com/brendonky18/Honors-Thesis.CTFs/blob/ctfd-integration/crypto-cracking/notes_0.md).

value: 100
category: Cryptography, Networking

# administrative
container_name: crypto-cracking
